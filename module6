1) What is JavaScript?
Ans:  JavaScript was initially created to “make web pages alive”. The programs in this language are 
      called scripts. They can be written right in a web page’s HTML and run automatically as the page loads. Scripts are provided and executed as plain text. They don’t need special preparation or compilation to run.




2) What is the use of isNaN function?
Ans:    The JavaScript isNaN() Function is used to check whether a given value is an illegal number or 
        not.It returns true if the value is a NaN else returns false.

        If the argument is NaN or cannot be converted to a number, isNaN returns true.
        If the argument is a valid number (including positive and negative numbers, zero, and numeric strings that can be converted to numbers), isNaN returns false.
        Here are some examples of how isNaN is commonly used:
        ex:
            isNaN(NaN);          // true
            isNaN(10);            // false
            isNaN("Hello");       // true (cannot be converted to a number)
            isNaN("42");          // false (string "42" can be converted to the number 42)
            isNaN(true);          // false (true is converted to 1)
            isNaN(false);         // false (false is converted to 0)
            isNaN(undefined);     // true (undefined cannot be converted to a number)





3) What is negative Infinity?
Ans:    Negative Infinity, often denoted as -Infinity, is a special numeric value in JavaScript and many 
        other programming languages. It represents the concept of negative infinity, which is a value that is smaller (or "less") than any finite negative number. In mathematical terms, it's used to describe a quantity that approaches negative infinity as it decreases without bound.

        NEGATIVE_INFINITY is a special numeric value that is returned when an arithmetic operation or mathematical function generates a negative value greater than the largest representable number in JavaScript (i.e., more negative than -Number. MAX_VALUE) . JavaScript displays the NEGATIVE_INFINITY value as -Infinity





4) Which company developed JavaScript?
Ans:    JavaScript was developed by Netscape Communications Corporation, a technology company that 
        played a significant role in the early days of the World Wide Web. Brendan Eich, an engineer at Netscape, created JavaScript in just 10 days in May 1995. Initially, it was known as "Mocha" and later "LiveScript" before finally being renamed JavaScript.

        JavaScript was introduced in Netscape Navigator 2.0, one of the earliest web browsers, to add interactivity and dynamic behavior to web pages. Its initial purpose was to handle client-side scripting, enabling web developers to create more engaging and interactive websites.





5) What are undeclared and undefined variables?
Ans:    "Undeclared" and "undefined" variables are related but distinct concepts in programming, often used 
        in the context of JavaScript.

        1. Undeclared Variables:
            An undeclared variable is a variable that has been used in code without being declared (i.e., it lacks a var, let, or const keyword) in the current scope. When you attempt to use an undeclared variable, JavaScript will typically throw a reference error.

        2. Undefined Variables:
            An undefined variable is a variable that has been declared but has not been assigned a value. In JavaScript, when you declare a variable without initializing it, it automatically gets the value undefined by default.





6) Write the code for adding new elements dynamically?
Ans:    HTML:
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Add Elements Dynamically</title>
            </head>
            <body>
                <ul id="myList">
                    <!-- Existing list items (if any) go here -->
                </ul>

                <button id="addItemButton">Add Item</button>

                <script src="script.js"></script>
            </body>
            </html>
        
        JavaScript (script.js):
            // Get references to the list and button
            const myList = document.getElementById('myList');
            const addItemButton = document.getElementById('addItemButton');

            // Function to add a new item to the list
            function addItem() {
                // Create a new list item element
                const newItem = document.createElement('li');
                
                // Set the text content of the new item
                newItem.textContent = 'New Item';
                
                // Append the new item to the list
                myList.appendChild(newItem);
            }





7) What is the difference between ViewState and SessionState?
Ans:    ViewState Maintained at page level only. View state can only be visible from a single page and 
        not multiple pages. It will retain values in the event of a postback operation occurring. Information is stored on the client’s end only. used to allow the persistence of page-instance-specific data. ViewState values are lost/cleared when new page is loaded. SessionState Maintained at session level. Session state value availability is across all pages available in a user session. In session state, user data remains in the server. Data is available to user until the browser is closed or there is session expiration. Information is stored on the server. used for the persistence of user-specific data on the server’s end. SessionState can be cleared by programmer or user or in case of timeouts.





8) What is === operator?
Ans:    The === operator in JavaScript is called the "strict equality" or "strict comparison" operator. 
        It is used to compare two values for equality without performing type coercion. In other words, it checks if the values are not only equal in value but also of the same data type.

        Here's how the === operator works:
        1. If the types of both operands are the same, and their values are equal, the operator returns true.
        2. If the types of the operands are different, the operator returns false, even if the values may be the same when converted to a common type.
        3. It does not perform automatic type conversion, which can lead to more predictable and reliable comparisons.




9) How can the style/class of an element be changed?
Ans:    You can change the style and class of an HTML element using JavaScript. Here are methods to do both:

        1. Changing the Style of an Element:
            You can change the style of an element by directly modifying its style property in JavaScript. This property allows you to access and modify specific CSS properties of the element. Here's an example:
                HTML:
                    <div id="myElement">This is a div</div>

                JavaScript:
                    // Get a reference to the element
                    var myElement = document.getElementById('myElement');

                    // Change the background color to red
                    myElement.style.backgroundColor = 'red';

                    // Change the font size to 20 pixels
                    myElement.style.fontSize = '20px';

                    // You can change any CSS property in a similar way

        2. Changing the Class of an Element:
            You can change the class of an element by modifying its className property or by using the classList property for more advanced operations. Here's an example:
                HTML:
                    <div id="myElement" class="initialClass">This is a div</div>

                JavaScript:
                    // Get a reference to the element
                    var myElement = document.getElementById('myElement');

                    // Change the class of the element
                    myElement.className = 'newClass'; // Replaces the entire class attribute

                    // Alternatively, you can use classList for more flexibility
                    myElement.classList.add('anotherClass'); // Adds a class
                    myElement.classList.remove('initialClass'); // Removes a class
                    myElement.classList.toggle('active'); // Toggles a class






10) How to read and write a file using JavaScript?
Ans:    1. file=fopen(getScriptPath(),0); The function fread() is used for reading the file content. 
        2. str = fread(file,flength(file)) ; The function fwrite() is used to write the contents to the file. 3. file = fopen("c:\MyFile.txt", 3);// opens the file for writing.





11) What are all the looping structures in JavaScript?
Ans:    JavaScript provides several looping structures that allow you to execute a block of code 
        repeatedly. The primary looping structures in JavaScript are:

        1. for Loop:
            The for loop is one of the most commonly used looping structures. It has three parts: initialization, condition, and increment/decrement.
                for (let i = 0; i < 5; i++) {
                    // Code to be executed repeatedly
                }

        2. while Loop:
            The while loop repeats a block of code as long as a specified condition is true.
                let i = 0;
                while (i < 5) {
                    // Code to be executed repeatedly
                    i++;
                }

        3. do...while Loop:
            The do...while loop is similar to the while loop but guarantees that the code block is executed at least once before checking the condition.
                let i = 0;
                do {
                    // Code to be executed repeatedly
                    i++;
                } while (i < 5);
        
        4. for...in Loop:
            The for...in loop is used for iterating over the properties of an object. It's often used with objects and arrays.
                const person = {
                    firstName: 'John',
                    lastName: 'Doe',
                    age: 30
                };
                for (const key in person) {
                    // Code to iterate over object properties
                    console.log(key, person[key]);
                }
    
        5. for...of Loop:
            The for...of loop is used for iterating over iterable objects like arrays, strings, maps, sets, and more.
                const colors = ['red', 'green', 'blue'];
                for (const color of colors) {
                    // Code to iterate over array elements
                    console.log(color);
                }

        6. forEach() Method (Array Method):
            The forEach() method is used for iterating over elements in an array. It provides a concise way to loop through array elements.
                const fruits = ['apple', 'banana', 'cherry'];
                fruits.forEach((fruit) => {
                    // Code to iterate over array elements
                    console.log(fruit);
                });
                
        These are the primary looping structures available in JavaScript. You can choose the loop that best suits your specific use case, whether it involves iterating over arrays, objects, or executing code a certain number of times. Each loop has its own advantages and is used in different situations.





12) How can you convert the string of any base to an integer in JavaScript?
Ans:    In JavaScript, you can convert a string representing a number in any base (binary, octal, 
        hexadecimal, etc.) to an integer using the parseInt() function. parseInt() allows you to specify the base (radix) of the input string as the second argument. Here's how you can do it:

            const binaryString = "1010"; // Binary representation of 10
            const octalString = "12";    // Octal representation of 10
            const hexadecimalString = "A"; // Hexadecimal representation of 10

            const binaryToInteger = parseInt(binaryString, 2);      // Base 2 (binary) to integer
            const octalToInteger = parseInt(octalString, 8);        // Base 8 (octal) to integer
            const hexadecimalToInteger = parseInt(hexadecimalString, 16); // Base 16 (hexadecimal) to integer

            console.log(binaryToInteger);      // Output: 10
            console.log(octalToInteger);       // Output: 10
            console.log(hexadecimalToInteger); // Output: 10





13) What is the function of the delete operator?
Ans:    The delete operator removes a property from an object. If the property's value is an object and 
        there are no more references to the object, the object held by that property is eventually released automatically.





14) What are all the types of Pop up boxes available in JavaScript?
Ans: JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.

    1. Alert Box:
        The alert() function is used to display a simple message to the user in a popup dialog box. It typically contains an "OK" button for the user to acknowledge the message. Alert boxes are often used to display important information or warnings to users.
        Example:
            alert("This is an alert box!");

    2. Confirm Box:
        The confirm() function is used to create a popup dialog box with a message and two buttons: "OK" and "Cancel." It allows the user to make a binary choice (yes or no, true or false) and returns a Boolean value (true for "OK" and false for "Cancel").
        Example:
            const result = confirm("Do you want to continue?");
            if (result) {
                // User clicked "OK"
            } else {
                // User clicked "Cancel"
            }

    3. Prompt Box:
        The prompt() function is used to create a popup dialog box with a message, an input field, and two buttons: "OK" and "Cancel." It allows the user to enter a text response, which is returned as a string. If the user clicks "OK" without entering any text, an empty string is returned.
        Example:
            const userInput = prompt("Please enter your name:", "John Doe");
            if (userInput !== null) {
                // User entered a value (not canceled)
                console.log("Hello, " + userInput);
            } else {
                // User clicked "Cancel" or closed the prompt
                console.log("No name entered.");
            }






15) What is the use of Void (0)?
Ans:    You might have occasionally came across “javascript:void(0)” in an HTML Document. It is often 
        used when inserting an expression in a web page might produce some unwanted effect. To remove this effect, “javascript:void(0)” is used. This expression returns undefined primitive value.




16) How can a page be forced to load another page in JavaScript?
Ans:     Approach: We can use window.location property inside the script tag to forcefully load another page in Javascript. It is a reference to a Location object that is it represents the current location of the document. We can change the URL of a window by accessing it.







17) What are the disadvantages of using innerHTML in JavaScript?
Ans:    While the innerHTML property in JavaScript is a powerful and convenient way to manipulate the 
        content of HTML elements, it has some disadvantages and potential risks when used improperly. Here are some of the drawbacks and concerns associated with using innerHTML:

        1. Security Risks (Cross-Site Scripting - XSS):
            One of the most significant disadvantages of using innerHTML is the potential for introducing security vulnerabilities, specifically Cross-Site Scripting (XSS) attacks. If you use innerHTML to insert user-generated or untrusted content into a web page without proper sanitization or validation, it can execute malicious scripts, steal user data, or manipulate the page in unexpected ways. To mitigate this risk, it's crucial to validate and sanitize any user-generated content before using innerHTML.
        
        2. Performance Impact:
            Manipulating the innerHTML of an element can have performance implications, especially when dealing with large or complex DOM structures. When you use innerHTML to update an element's content, the browser may need to re-parse and rebuild parts of the DOM, which can be less efficient than directly modifying specific DOM nodes using other methods like createElement and appendChild.

        3. Event Handlers and Data Binding:
            When you replace or modify an element's content using innerHTML, any existing event listeners and data bindings attached to child elements may be lost or disrupted. This can lead to unexpected behavior in your web application if you rely on these features.

        4. Limited Control Over DOM Structure:
            Using innerHTML to modify content often involves working with raw HTML strings, which can be error-prone and less maintainable than manipulating the DOM directly. It can be challenging to ensure that the generated HTML structure is always correct and valid.

        5. Compatibility and Portability:
            While innerHTML is widely supported in modern browsers, there may be variations in behavior and compatibility with older browsers. Additionally, if you plan to port your code to other platforms or environments (e.g., server-side rendering with Node.js), reliance on innerHTML may not be as straightforward.

        6. Accessibility Concerns:
            When you use innerHTML to modify content, you should be mindful of accessibility concerns. Dynamically generated content should be properly labeled and structured to ensure that it is accessible to users with disabilities. Manual adjustments may be required to maintain accessibility standards.

        To mitigate these disadvantages, it's important to use innerHTML judiciously and follow best practices:
        
        * Sanitize User Input: Always validate and sanitize any user-generated content before inserting it into the DOM.
        * Consider Performance: Assess whether manipulating the DOM using innerHTML is the most efficient approach, especially for complex operations.
        * Preserve Event Handlers: If you're replacing content with event listeners, reattach those listeners as needed.
        * Test Across Browsers: Ensure that your code works consistently across different browsers and environments.
        * Consider Alternative DOM Manipulation Methods: Depending on your use case, consider using other DOM manipulation methods like createElement, appendChild, and textContent for more controlled and efficient updates.

        Overall, while innerHTML is a valuable tool for working with HTML content in JavaScript, it should be used thoughtfully and with an awareness of its potential risks and limitations.




18) Create password field with show hide functionalities 
Ans:    <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Password Field with Show/Hide</title>
        </head>
        <body>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password">
            <input type="checkbox" id="showPassword"> <b>Show Password</b>

            <script>
                let passwordInput = document.getElementById('password');
                let showPasswordofCheckbox = document.getElementById('showPassword');

                showPasswordCheckbox.addEventListener('change', function () {
                    if (showPasswordofCheckbox.checked) 
                    {
                        passwordInput.type = 'text'; // Show the password
                    } else 
                    {
                        passwordInput.type = 'password'; // Hide the password
                    }
                });
            </script>
        </body>
        </html>







19) Create basic math operation in JS.
Ans: 
<!DOCTYPE html>
<html>
<head>
    <style>
        h1 {
            text-align: center;
        }
        body {
            font-family: Arial, sans-serif;
            width: 500px;
            border: 2px solid black;
            margin-left: 30%;
            padding: 30px;
        }
        input {
            height: 22px;
            width: 95%;
        }
        .grid {
            display: flex;
            flex-direction: unset;
            width: 100%;
        }
        .grid1 {
            width: 40%;
        }
        .grid2 {
            width: 60%;
        }
        button {
            height: 44px;
            width: 51px;
            font-size: 20px;
            font-weight: 900;
            margin-bottom: 8px;
        }
        p {
            margin: 15% 0px 0px 19%;
        }
    </style>
</head>
<body>
    <h1>Maths Operation</h1>
    <div class="calculator">
        <div class="grid">
            <div class="grid1">
                <label for=""><b>Enter 1st number:</b></label> <br> <br> <br>
                <label for=""><b>Enter 2nd number:</b></label> <br> <br><br>
                <button onclick="calculate('add')">+</button>
                <button onclick="calculate('subtract')">-</button>
                <button onclick="calculate('multiply')">*</button>
                <button onclick="calculate('divide')">/</button>
                <button onclick="calculate('mod')">%</button>
            </div>
            <div class="grid2">
                <input type="number" id="num1" placeholder="Enter the first number"><br> <br>
                <input type="number" id="num2" placeholder="Enter the second number"><br> <br>
                <p id="result"><b>Answer is: </b></p>
            </div>
        </div>
    </div>
    <!-- script tag for java script -->
    <script>
        function calculate(operation) {
            var num1 = parseFloat(document.getElementById("num1").value);
            var num2 = parseFloat(document.getElementById("num2").value);
            var resultElement = document.getElementById("result");
            var result;
            if (isNaN(num1) || isNaN(num2)) {
                result = "Please enter valid numbers.";
            } else {
                switch (operation) {
                    case 'add':
                        result = num1 + num2;
                        break;
                    case 'subtract':
                        result = num1 - num2;
                        break;
                    case 'multiply':
                        result = num1 * num2;
                        break;
                    case 'divide':
                        if (num2 === 0) {
                            result = "Division by zero is not allowed.";
                        } else {
                            result = num1 / num2;
                        }
                    case 'mod' :
                        if (isNaN(num1) || isNaN(num2)) {
                                resultElement.textContent = "Please enter valid numbers.";
                            } else {
                                var result = num1 % num2;
                                resultElement.textContent = "Result: " + result;
                            }
                            break;
                    default:
                        result = "Invalid operation.";
                }
            }
            resultElement.textContent = "Result: " + result;
        }
    </script>
</body>
</html>




20) Create result.
Ans: 
<!DOCTYPE html>
<html>
<head>
    <style>
        body{
            border: 2px solid black;
            width: 600px;
            padding: 30px;
        }
        .grid{
            display: grid;
            grid-template-columns: repeat(2,1fr);
        }
        label{
            font-size: 20px;
        }
        input{
            height: 18px;
            width: 100%;
        }
        button{
            font-size: 16px;
            padding: 5px 20px;
        }
    </style>
</head>
<body>
    <h1>Marksheet for Information Technology</h1>
    <h3 style="text-align: center;">Enter Marks</h3>
    <div class="grid">
        <div class="g1">
            <p><label for="subject1">1. C Language</label></p>
            <p><label for="subject2">2. C++ Language</label></p>
            <p><label for="subject3">3. Database</label></p>
            <p><label for="subject4">4. HTML</label></p>
            <p><label for="subject5">5. CSS</label></p>
            <p><label for="subject6">6. php</label></p>
            <p><label for="subject7">7. Core java</label></p>
            <br><br> <br>
        <b>Total Marks: <span id="totalMarks">-</span></b>
        </div>
        <div class="g2">
            <p><input type="number" id="subject1" placeholder="Enter marks"></p>
            <p><input type="number" id="subject2" placeholder="Enter marks"></p>
            <p><input type="number" id="subject3" placeholder="Enter marks"></p>
            <p><input type="number" id="subject4" placeholder="Enter marks"></p>
            <p><input type="number" id="subject5" placeholder="Enter marks"></p>
            <p><input type="number" id="subject6" placeholder="Enter marks"></p>
            <p><input type="number" id="subject7" placeholder="Enter marks"></p>
            <button onclick="calculateMarksheet()">Result</button>
            <p><b>Average: <span id="average">-</span></b></p>
        </div>
    </div>
    <script>
        function calculateMarksheet() {
            var subject1 = parseFloat(document.getElementById("subject1").value);
            var subject2 = parseFloat(document.getElementById("subject2").value);
            var subject3 = parseFloat(document.getElementById("subject3").value);
            var subject4 = parseFloat(document.getElementById("subject4").value);
            var subject5 = parseFloat(document.getElementById("subject5").value);
            var subject6 = parseFloat(document.getElementById("subject6").value);
            var subject7 = parseFloat(document.getElementById("subject7").value);
            var totalMarksElement = document.getElementById("totalMarks");
            var averageElement = document.getElementById("average");
            if (isNaN(subject1) || isNaN(subject2) || isNaN(subject3) || isNaN(subject4) || isNaN(subject5) || isNaN(subject6) || isNaN(subject7)) {
                totalMarksElement.textContent = "Invalid input";
                averageElement.textContent = "Invalid input";
                return;
            }
            var totalMarks = subject1 + subject2 + subject3+ subject4+ subject5+ subject6+ subject7;
            var average = totalMarks / 7;
            console.log(totalMarks);
            document.getElementById("totalMarks").innerHTML = totalMarks ;
            document.getElementById("average").innerHTML = average.toFixed(2);
        }
    </script>
</body>
</html>






21) Create a slider using JavaScript.
Ans: 
<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fody Slider</title>
    <link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css" />
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap");
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  list-style-type: none;
  text-decoration: none;
}

:root {
  --primary: #ec994b;
  --white: #ffffff;
  --bg: #f5f5f5;
}

html {
  font-size: 62.5%;
  font-family: "Montserrat", sans-serif;
  scroll-behavior: smooth;
}

@media (min-width: 1440px) {
  html {
    zoom: 1.5;
  }
}

@media (min-width: 2560px) {
  html {
    zoom: 1.7;
  }
}

@media (min-width: 3860px) {
  html {
    zoom: 2.5;
  }
}

::-webkit-scrollbar {
  width: 1.3rem;
}

::-webkit-scrollbar-thumb {
  border-radius: 1rem;
  background: #797979;
  transition: all 0.5s ease-in-out;
}

::-webkit-scrollbar-thumb:hover {
  background: #222224;
}

::-webkit-scrollbar-track {
  background: #f9f9f9;
}

body {
  font-size: 1.6rem;
  background: var(--bg);
}

.container {
  max-width: 124rem;
  padding: 0 1rem;
  margin: 0 auto;
}

.text-center {
  text-align: center;
}

.section-heading {
  font-size: 3rem;
  color: var(--primary);
  padding: 2rem 0;
}

#tranding {
  padding: 4rem 0;
}

@media (max-width:1440px) {
  #tranding {
    padding: 7rem 0;
  }
}

#tranding .tranding-slider {
  height: 52rem;
  padding: 2rem 0;
  position: relative;
}

@media (max-width:500px) {
  #tranding .tranding-slider {
    height: 45rem;
  }
}

.tranding-slide {
  width: 37rem;
  height: 42rem;
  position: relative;
}

@media (max-width:500px) {
  .tranding-slide {
    width: 28rem !important;
    height: 36rem !important;
  }
  .tranding-slide .tranding-slide-img img {
    width: 28rem !important;
    height: 36rem !important;
  }
}

.tranding-slide .tranding-slide-img img {
  width: 37rem;
  height: 42rem;
  border-radius: 2rem;
  object-fit: cover;
}

.tranding-slide .tranding-slide-content {
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
}

.tranding-slide-content .food-price {
  position: absolute;
  top: 2rem;
  right: 2rem;
  color: var(--white);
}

.tranding-slide-content .tranding-slide-content-bottom {
  position: absolute;
  bottom: 2rem;
  left: 2rem;
  color: var(--white);
}

.food-rating {
  padding-top: 1rem;
  display: flex;
  gap: 1rem;
}

.rating ion-icon {
  color: var(--primary);
}

.swiper-slide-shadow-left,
.swiper-slide-shadow-right {
  display: none;
}

.tranding-slider-control {
  position: relative;
  bottom: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.tranding-slider-control .swiper-button-next {
  left: 58% !important;
  transform: translateX(-58%) !important;
}

@media (max-width:990px) {
  .tranding-slider-control .swiper-button-next {
    left: 70% !important;
    transform: translateX(-70%) !important;
  }
}

@media (max-width:450px) {
  .tranding-slider-control .swiper-button-next {
    left: 80% !important;
    transform: translateX(-80%) !important;
  }
}

@media (max-width:990px) {
  .tranding-slider-control .swiper-button-prev {
    left: 30% !important;
    transform: translateX(-30%) !important;
  }
}

@media (max-width:450px) {
  .tranding-slider-control .swiper-button-prev {
    left: 20% !important;
    transform: translateX(-20%) !important;
  }
}

.tranding-slider-control .slider-arrow {
  background: var(--white);
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 50%;
  left: 42%;
  transform: translateX(-42%);
  filter: drop-shadow(0px 8px 24px rgba(18, 28, 53, 0.1));
}

.tranding-slider-control .slider-arrow ion-icon {
  font-size: 2rem;
  color: #222224;
}

.tranding-slider-control .slider-arrow::after {
  content: '';
}

.tranding-slider-control .swiper-pagination {
  position: relative;
  width: 15rem;
  bottom: 1rem;
}

.tranding-slider-control .swiper-pagination .swiper-pagination-bullet {
  filter: drop-shadow(0px 8px 24px rgba(18, 28, 53, 0.1));
}

.tranding-slider-control .swiper-pagination .swiper-pagination-bullet-active {
  background: var(--primary);
}
    </style>
  </head>

  <body>
    <section id="tranding">
      <div class="container">
        <h3 class="text-center section-subheading">- popular Delivery -</h3>
        <h1 class="text-center section-heading">Tranding food</h1>
      </div>
      <div class="container">
        <div class="swiper tranding-slider">
          <div class="swiper-wrapper">
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://img.freepik.com/free-photo/chicken-wings-barbecue-sweetly-sour-sauce-picnic-summer-menu-tasty-food-top-view-flat-lay_2829-6471.jpg" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$20</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Special Pizza
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://st4.depositphotos.com/1158226/21391/i/450/depositphotos_213910052-stock-photo-tasty-roasted-chicken-wings-metal.jpg" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$20</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Meat Ball
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://image.shutterstock.com/image-photo/healthy-food-clean-eating-selection-260nw-722718082.jpg" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$40</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Burger
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://thumbs.dreamstime.com/b/assorted-indian-recipes-food-various-spices-rice-wooden-table-92742528.jpg" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$15</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Frish Curry
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT_xdKg2OssMWPE-SqkgOduIZDcEykLm6N6_hdmsJfl&s" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$15</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Pane Cake
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://media.istockphoto.com/id/1457889029/photo/group-of-food-with-high-content-of-dietary-fiber-arranged-side-by-side.jpg?b=1&s=612x612&w=0&k=20&c=BON5S0uDJeCe66N9klUEw5xKSGVnFhcL8stPLczQd_8=" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$20</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Vanilla cake
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
            <!-- Slide-start -->
            <div class="swiper-slide tranding-slide">
              <div class="tranding-slide-img">
                <img src="https://www.shutterstock.com/image-photo/healthy-food-clean-eating-selection-260nw-722718097.jpg" alt="Tranding">
              </div>
              <div class="tranding-slide-content">
                <h1 class="food-price">$8</h1>
                <div class="tranding-slide-content-bottom">
                  <h2 class="food-name">
                    Straw Cake
                  </h2>
                  <h3 class="food-rating">
                    <span>4.5</span>
                    <div class="rating">
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                      <ion-icon name="star"></ion-icon>
                    </div>
                  </h3>
                </div>
              </div>
            </div>
            <!-- Slide-end -->
          </div>

          <div class="tranding-slider-control">
            <div class="swiper-button-prev slider-arrow">
              <ion-icon name="arrow-back-outline"></ion-icon>
            </div>
            <div class="swiper-button-next slider-arrow">
              <ion-icon name="arrow-forward-outline"></ion-icon>
            </div>
            <div class="swiper-pagination"></div>
          </div>

        </div>
      </div>
    </section>

    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <script src="https://unpkg.com/swiper@8/swiper-bundle.min.js"></script>
    <script>
        var TrandingSlider = new Swiper('.tranding-slider', {
  effect: 'coverflow',
  grabCursor: true,
  centeredSlides: true,
  loop: true,
  slidesPerView: 'auto',
  coverflowEffect: {
    rotate: 0,
    stretch: 0,
    depth: 100,
    modifier: 2.5,
  },
  pagination: {
    el: '.swiper-pagination',
    clickable: true,
  },
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  }
});
    </script>
  </body>

</html>
